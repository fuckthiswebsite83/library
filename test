local ESP = {}
ESP.__index = ESP

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

-- Box class
local Box = {}
Box.__index = Box

function Box.new(character)
    local self = setmetatable({}, Box)
    self.character = character
    self.box = Drawing.new("Square")
    self.box.Visible = false
    self.box.Color = Color3.new(1, 0, 0)
    self.box.Thickness = 2
    self.box.Transparency = 1

    self.healthBar = Drawing.new("Square")
    self.healthBar.Visible = false
    self.healthBar.Color = Color3.new(0, 1, 0)
    self.healthBar.Thickness = 1
    self.healthBar.Transparency = 1
    self.healthBar.Filled = true

    self.connection = RunService.RenderStepped:Connect(function()
        self:Update()
    end)

    return self
end

function Box:Update()
    local character = self.character
    if not character or not character.Parent then
        self:Remove()
        return
    end

    local head = character:FindFirstChild("Head")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChildOfClass("Humanoid")

    if not head or not rootPart or not humanoid or humanoid.Health <= 0 then
        self:Remove()
        return
    end

    local headPos, headOnScreen = workspace.CurrentCamera:WorldToViewportPoint(head.Position)
    local rootPos, rootOnScreen = workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position)
    local legPos, legOnScreen = workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position - Vector3.new(0, 3, 0))

    if headOnScreen and rootOnScreen and legOnScreen then
        local boxHeight = headPos.Y - legPos.Y
        local boxWidth = boxHeight / 2 -- Adjust the width as needed

        self.box.Size = Vector2.new(boxWidth, boxHeight)
        self.box.Position = Vector2.new(rootPos.X - boxWidth / 2, headPos.Y - boxHeight / 2)
        self.box.Visible = true

        -- Update health bar
        local healthPercent = humanoid.Health / humanoid.MaxHealth
        self.healthBar.Size = Vector2.new(5, boxHeight * healthPercent)
        self.healthBar.Position = Vector2.new(self.box.Position.X - 10, self.box.Position.Y + boxHeight * (1 - healthPercent))
        self.healthBar.Visible = true
    else
        self.box.Visible = false
        self.healthBar.Visible = false
    end
end

function Box:Remove()
    self.box:Remove()
    self.healthBar:Remove()
    if self.connection then
        self.connection:Disconnect()
    end
end

ESP.Box = Box

function ESP:CreateBox(character)
    return Box.new(character)
end

function ESP:RemoveBox(box)
    box:Remove()
end

function ESP:TrackPlayer(player)
    local function onCharacterAdded(character)
        ESP:CreateBox(character)
    end

    player.CharacterAdded:Connect(onCharacterAdded)
    if player.Character then
        onCharacterAdded(player.Character)
    end
end

function ESP:Init()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            ESP:TrackPlayer(player)
        end
    end

    Players.PlayerAdded:Connect(function(player)
        ESP:TrackPlayer(player)
    end)
end

return ESP
